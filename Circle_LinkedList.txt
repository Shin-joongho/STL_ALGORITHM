#include <iostream>
#include <vector>
#include <string>
#include <algorithm>

using namespace std;

void Swap(int& a, int& b);
void QuickSort(int start, int end, vector<int>& a);
int BinarySearch(int left, int right, vector<int>& a, int search);

class Node
{
public:
	int num = 0;
	Node* prov = nullptr;
	Node* next = nullptr;
	static int chk;

	Node()
	{
		num = 0;
	}
	Node(int x)
	{
		num = x;
	}
	~Node()
	{

	}

public :
	void push(int x, Node* head)
	{
		if (next == nullptr)
		{
			Node* node = new Node(x);
			next = node;
			node->prov = node;
			node->next = node;
		}
		else
		{
			Node* answer = next;
			while(true)
			{
				if (answer->next == head->next)
				{
					Node* node = new Node(x);
					node->prov = answer;
					node->next = head->next;
					head->next->prov = node;
					answer->next = node;

					break;
				}
				else
				{
					answer = answer->next;
				}
			}
		}
		chk++;
		
	}
	Node* thisDel()
	{
		if (prov != nullptr || next != nullptr)
		{
			prov->next = next;
			next->prov = prov;

			chk--;
			return next;
			
		}
	}
	int CPS(int m)
	{
		Node* answer = next;

		while (chk >= 1)
		{
			for (int i = 0; i < m -1;i++)
			{
				answer = answer->next;
			}
			answer = answer->thisDel();
		}

		return answer->num;

	}
	void del(int arr)
	{
		if (next == nullptr)
			return;
		else
		{
			Node* answer = next;
			for (int i = 1; i < arr; i++)
			{
				answer = answer->next;
			}
			
			answer->prov->next = answer->next;
			answer->next->prov = answer->prov;
			chk--;
			delete answer;
		}
	}
	int print(int arr)
	{
		Node* answer = next;
		for (int i = 1; i < arr; i++)
		{
			answer = answer->next;
		}
		return answer->num;
	}
};

int Node::chk = 0;

int main()
{
	int n, m;
	cin >> n >> m;

	Node* head = new Node();

	for (int i = 1; i <= n;i++)
	{
		head->push(i, head);
	}

	cout << head->CPS(m);

}

int BinarySearch(int left, int right, vector<int>& a, int search)
{
	int pivot = (left + right) / 2;

	if (a[pivot] == search)
	{
		return pivot;
	}
	else if (left == right)
	{
		return -1;
	}
	else if (a[pivot] < search)
	{
		BinarySearch(pivot + 1, right, a, search);
	}
	else if (a[pivot] > search)
	{
		BinarySearch(left, pivot - 1, a, search);
	}
}

void QuickSort(int start, int end, vector<int>& a)
{
	if (start >= end)
		return;

	int left = start;
	int right = start;
	int pivot = end;

	while (right < pivot)
	{
		if (a[right] < a[pivot])
		{
			Swap(a[left], a[right]);
			left++;
		}
		right++;
	}

	Swap(a[left], a[pivot]);

	QuickSort(start, left - 1, a);
	QuickSort(left + 1, end, a);
}

void Swap(int& a, int& b)
{
	int temp = a;
	a = b;
	b = temp;
}
